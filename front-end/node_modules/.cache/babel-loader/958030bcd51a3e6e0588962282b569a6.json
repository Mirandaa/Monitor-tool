{"ast":null,"code":"// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)\n'use strict';\n\nvar toObject = require('./_to-object'),\n    toIndex = require('./_to-index'),\n    toLength = require('./_to-length');\n\nmodule.exports = function fill(value\n/*, start = 0, end = @length */\n) {\n  var O = toObject(this),\n      length = toLength(O.length),\n      aLen = arguments.length,\n      index = toIndex(aLen > 1 ? arguments[1] : undefined, length),\n      end = aLen > 2 ? arguments[2] : undefined,\n      endPos = end === undefined ? length : toIndex(end, length);\n\n  while (endPos > index) {\n    O[index++] = value;\n  }\n\n  return O;\n};","map":{"version":3,"sources":["/Users/mac/node_modules/core-js/modules/_array-fill.js"],"names":["toObject","require","toIndex","toLength","module","exports","fill","value","O","length","aLen","arguments","index","undefined","end","endPos"],"mappings":"AAAA;AACA;;AACA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,cAAD,CAAtB;AAAA,IACIC,OAAO,GAAID,OAAO,CAAC,aAAD,CADtB;AAAA,IAEIE,QAAQ,GAAGF,OAAO,CAAC,cAAD,CAFtB;;AAGAG,MAAM,CAACC,OAAP,GAAiB,SAASC,IAAT,CAAcC;AAAM;AAApB,EAAoD;AACnE,MAAIC,CAAC,GAAQR,QAAQ,CAAC,IAAD,CAArB;AAAA,MACIS,MAAM,GAAGN,QAAQ,CAACK,CAAC,CAACC,MAAH,CADrB;AAAA,MAEIC,IAAI,GAAKC,SAAS,CAACF,MAFvB;AAAA,MAGIG,KAAK,GAAIV,OAAO,CAACQ,IAAI,GAAG,CAAP,GAAWC,SAAS,CAAC,CAAD,CAApB,GAA0BE,SAA3B,EAAsCJ,MAAtC,CAHpB;AAAA,MAIIK,GAAG,GAAMJ,IAAI,GAAG,CAAP,GAAWC,SAAS,CAAC,CAAD,CAApB,GAA0BE,SAJvC;AAAA,MAKIE,MAAM,GAAGD,GAAG,KAAKD,SAAR,GAAoBJ,MAApB,GAA6BP,OAAO,CAACY,GAAD,EAAML,MAAN,CALjD;;AAMA,SAAMM,MAAM,GAAGH,KAAf;AAAqBJ,IAAAA,CAAC,CAACI,KAAK,EAAN,CAAD,GAAaL,KAAb;AAArB;;AACA,SAAOC,CAAP;AACD,CATD","sourcesContent":["// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)\n'use strict';\nvar toObject = require('./_to-object')\n  , toIndex  = require('./_to-index')\n  , toLength = require('./_to-length');\nmodule.exports = function fill(value /*, start = 0, end = @length */){\n  var O      = toObject(this)\n    , length = toLength(O.length)\n    , aLen   = arguments.length\n    , index  = toIndex(aLen > 1 ? arguments[1] : undefined, length)\n    , end    = aLen > 2 ? arguments[2] : undefined\n    , endPos = end === undefined ? length : toIndex(end, length);\n  while(endPos > index)O[index++] = value;\n  return O;\n};"]},"metadata":{},"sourceType":"script"}